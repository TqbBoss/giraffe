import java.nio.file.Files

/*
 * This file was generated by the Gradle 'init' task.
 * It is mainly to set up the sub-modules basic spring cloud environment
 */
plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.9.RELEASE' apply false
}

allprojects{
    group = project.group
    sourceCompatibility = project.sourceCompatibility
    version = project.version
}

def exclude_groups = project.skip.tokenize(",")

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'

    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        mavenCentral()
    }

    if (exclude_groups.contains(name)){
        println "skip module "+ name
        bootJar.enabled = false
    }

    ext {
        set('springCloudVersion', "Hoxton.SR3")
    }

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    test {
        useJUnitPlatform()
    }
}

def cleanPackage() {
    def dir = new File(project.buildDir as String)
    if (dir.exists()){
        def files = dir.listFiles()
        for (def file : files){
            file.delete()
        }
        def d = dir.deleteDir()
    }
}

def copyPackages() {
    def root_build = project.buildDir as String
    def dest = new File(root_build)
    if (!dest.exists()){
        dest.mkdirs()
    }
    project.subprojects.each {
        def build_dir = it.buildDir as String
        def libPath = new File(build_dir + "\\libs")
        if (libPath.exists()){
            def files = libPath.listFiles(new FilenameFilter() {
                @Override
                boolean accept(File dir, String name) {
                    return name.endsWith(".jar") || name.endsWith(".war")
                }
            })
            for (def f : files){
                def copyFile = new File(root_build + "\\" + f.name)
                println copyFile.path
                Files.copy(f.toPath(), copyFile.toPath())
            }
        }
    }
}

this.gradle.buildFinished {
    copyPackages()
}